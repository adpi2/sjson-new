package sjsonnew

import scala.reflect.ClassTag

trait UnionFormats {
  private[this] type JF[A] = JsonFormat[A] // simple alias for reduced verbosity

  [#/** *BEWARE*: [# A1#] must be a concrete leaf type, and not an interface. */
  def unionFormat1[U, [#A1 :JF: ClassTag#]]: JF[U] = new JF[U] {
    [#lazy val a1Format = implicitly[JF[A1]]#
    ]

    def write[J](u: U, builder: Builder[J]): Unit = {
      builder.beginObject()
      builder.addFieldName("value")
      u match {
      [#  case x if implicitly[ClassTag[A1]].runtimeClass == x.getClass => a1Format.write(x.asInstanceOf[A1], builder)#
      ]
      }
      builder.addFieldName("type")
      builder.writeString(className(u.getClass))
      builder.endObject()
    }
    def read[J](jsOpt: Option[J], unbuilder: Unbuilder[J]): U =
      jsOpt match {
        case Some(js) =>
          unbuilder.beginObject(js)
          val typeName = unbuilder.lookupField("type") match {
            case Some(x) => unbuilder.readString(x)
            case None    => deserializationError("Field not found: $type")
          }
          val valueJs = unbuilder.lookupField("value") match {
            case Some(x) => x
            case None    => deserializationError("Field not found: value")
          }
          val value = typeName match {
          [#  case x if className(implicitly[ClassTag[A1]].runtimeClass) == x => a1Format.read(Some(valueJs), unbuilder)#
          ]
          }
          unbuilder.endObject()
          value match { case u: U @unchecked => u }
        case None => deserializationError("Expected union JsObject, but got None")
      }
  }#
  ]

  private def className[A](c: Class[A]): String =
    try {
      c.getSimpleName
    } catch {
      case e: InternalError => c.getName
    }
}
